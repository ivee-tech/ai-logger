trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/AiLogger.Api/*
      - src/AiLogger.Core/*
      - src/AiLogger.Providers/*
      - src/AiLogger.Security/*
      - src/AiLogger.Storage/*
      - src/AiLogger.Tests/*
      - .pipelines/ai-logger-api-appservice.yml
      - infra/*
      - deployment/*

pr:
  branches:
    include:
      - main
      - develop

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '9.0.x'
  artifactName: 'api-drop'
  azureSubscription: 'mngenvmcap572176' # Update with your Azure service connection name
  resourceGroupName: 'rg-ailogger-001' # Update with your resource group name
  appServiceName: 'api-ailogger-001' # Update with your App Service name
  deployInfrastructure: 'false' # Set to true to deploy bicep templates before code rollout

stages:
- stage: Build
  displayName: Build and Test API
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: Use .NET SDK $(dotNetVersion)
      inputs:
        packageType: sdk
        version: '$(dotNetVersion)'
        includePreviewVersions: true

    - task: DotNetCoreCLI@2
      displayName: Restore solution
      inputs:
        command: restore
        projects: 'src/AiLogger.sln'

    - task: DotNetCoreCLI@2
      displayName: Build solution
      inputs:
        command: build
        projects: 'src/AiLogger.sln'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: Run unit tests
      inputs:
        command: test
        projects: 'src/AiLogger.Tests/AiLogger.Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --logger "trx" --collect "XPlat Code Coverage"'

    - task: PublishTestResults@2
      displayName: Publish test results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/*.trx'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        testRunTitle: 'AiLogger API Unit Tests'

    - task: DotNetCoreCLI@2
      displayName: Publish API
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'src/AiLogger.Api/AiLogger.Api.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api --no-build'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: ArchiveFiles@2
      displayName: Archive API package
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/api'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/AiLogger.Api.zip'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      displayName: Publish deployable artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/AiLogger.Api.zip'
        artifact: '$(artifactName)'

- stage: Deploy
  displayName: Deploy to Azure App Service
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployApi
    displayName: Deploy API
    environment: 'production/ailogger-api'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: '$(artifactName)'

          - task: AzureCLI@2
            displayName: Deploy infrastructure (optional)
            condition: eq(variables['deployInfrastructure'], 'true')
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                az deployment group create \
                  --resource-group $(resourceGroupName) \
                  --template-file infra/server-farm.bicep \
                  --parameters @infra/server-farm.ai-logger.parameters.jsonc
                az deployment group create \
                  --resource-group $(resourceGroupName) \
                  --template-file infra/app-svc.bicep \
                  --parameters @infra/app-svc.ai-logger.api.parameters.jsonc

          - task: AzureWebApp@1
            displayName: Deploy web app
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(appServiceName)'
              package: '$(Pipeline.Workspace)/$(artifactName)/AiLogger.Api.zip'
              appType: webApp

          - task: AzureCLI@2
            displayName: Verify deployment
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                echo "Checking deployment status for $(appServiceName)"
                az webapp show \
                  --name $(appServiceName) \
                  --resource-group $(resourceGroupName) \
                  --query "state"
