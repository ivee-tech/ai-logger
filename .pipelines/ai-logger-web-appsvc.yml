trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - AiLogger.Web/**
      - infra/**
      - deployment/**
      - .pipelines/ai-logger-web-appsvc.yml

pr:
  branches:
    include:
      - main
      - develop

variables:
  nodeVersion: '20.x'
  artifactName: 'web-drop'
  azureSubscription: 'mngenvmcap572176' # Update with your Azure service connection name
  resourceGroupName: 'rg-ailogger-001'  # Update with your resource group name
  appServiceName: 'app-ailogger-001'    # Update with your App Service name
  deployInfrastructure: 'false'         # Set to true to deploy bicep templates before code rollout

stages:
- stage: Build
  displayName: Build Angular App
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: Use Node.js $(nodeVersion)
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true

    - script: npm ci
      displayName: Install dependencies
      workingDirectory: 'AiLogger.Web'

    - script: npx ng build --configuration production
      displayName: Build production bundle
      workingDirectory: 'AiLogger.Web'

    - task: CopyFiles@2
      displayName: Stage build artifacts
      inputs:
        SourceFolder: 'AiLogger.Web/dist/ai-logger.web'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/web'

    - task: ArchiveFiles@2
      displayName: Archive web package
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/web'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/AiLogger.Web.zip'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      displayName: Publish deployable artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/AiLogger.Web.zip'
        artifact: '$(artifactName)'

- stage: Deploy
  displayName: Deploy to Azure App Service
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployWeb
    displayName: Deploy Web App
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: '$(artifactName)'

          - task: AzureCLI@2
            displayName: Deploy infrastructure (optional)
            condition: eq(variables['deployInfrastructure'], 'true')
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                az deployment group create \
                  --resource-group $(resourceGroupName) \
                  --template-file infra/server-farm.bicep \
                  --parameters @infra/server-farm.ai-logger.parameters.jsonc
                az deployment group create \
                  --resource-group $(resourceGroupName) \
                  --template-file infra/app-svc.bicep \
                  --parameters @infra/app-svc.ai-logger.app.parameters.jsonc

          - task: AzureWebApp@1
            displayName: Deploy static site
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(appServiceName)'
              package: '$(Pipeline.Workspace)/$(artifactName)/AiLogger.Web.zip'
              appType: webApp

          - task: AzureCLI@2
            displayName: Verify deployment
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                echo "Checking deployment status for $(appServiceName)"
                state=$(az webapp show \
                  --name $(appServiceName) \
                  --resource-group $(resourceGroupName) \
                  --query "state" \
                  --output tsv)
                echo "Web app state: $state"